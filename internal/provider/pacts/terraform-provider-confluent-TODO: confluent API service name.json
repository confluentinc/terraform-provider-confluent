{
  "consumer": {
    "name": "terraform-provider-confluent"
  },
  "interactions": [
    {
      "description": "A request to get kafka cluster by id",
      "pending": false,
      "providerStates": [
        {
          "name": "kafka cluster exists",
          "params": {
            "cluster_id": "lkc-12345"
          }
        }
      ],
      "request": {
        "method": "GET",
        "path": "/cmk/v2/clusters/lkc-12345",
        "query": {
          "environment": [
            "env-abc123"
          ]
        }
      },
      "response": {
        "body": {
          "content": {
            "api_version": "cmk/v2",
            "id": "lkc-12345",
            "kind": "Cluster",
            "metadata": {
              "created_at": "2000-02-01T12:30:00Z",
              "deleted_at": "2000-02-01T12:30:00Z",
              "resource_name": "crn://confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/cloud-cluster=lkc-12345/kafka=lkc-12345",
              "self": "http://127.0.0.1/cmk/v2/clusters/lkc-12345",
              "updated_at": "2000-02-01T12:30:00Z"
            },
            "spec": {
              "api_endpoint": "https://pkac-00000.us-west-2.aws.confluent.cloud",
              "availability": "SINGLE_ZONE",
              "byok": {
                "id": "cck-00000",
                "related": "https://api.confluent.cloud/byok/v1/keys/cck-00000",
                "resource_name": "https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/key=cck-00000"
              },
              "cloud": "GCP",
              "config": {
                "kind": "Basic"
              },
              "display_name": "ProdKafkaCluster",
              "environment": {
                "environment": "string",
                "id": "env-00000",
                "related": "https://api.confluent.cloud/v2/environments/env-00000",
                "resource_name": "https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-00000"
              },
              "http_endpoint": "https://lkc-00000-00000.us-central1.gcp.glb.confluent.cloud",
              "kafka_bootstrap_endpoint": "lkc-12345.us-east4.gcp.glb.confluent.cloud:9092",
              "network": {
                "environment": "string",
                "id": "n-00000",
                "related": "https://api.confluent.cloud/networking/v1/networks/n-00000",
                "resource_name": "https://api.confluent.cloud/organization=9bb441c4-edef-46ac-8a41-c49e44a3fd9a/environment=env-abc123/network=n-00000"
              },
              "region": "us-east4"
            },
            "status": {
              "cku": 2,
              "phase": "PROVISIONED"
            }
          },
          "contentType": "application/json",
          "encoded": false
        },
        "headers": {
          "Content-Type": [
            "application/json"
          ]
        },
        "matchingRules": {
          "body": {
            "$.api_version": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "equality"
                }
              ]
            },
            "$.id": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "equality"
                }
              ]
            },
            "$.kind": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "equality"
                }
              ]
            },
            "$.metadata.created_at": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$"
                }
              ]
            },
            "$.metadata.deleted_at": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$"
                }
              ]
            },
            "$.metadata.resource_name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^crn://.+/kafka=.+"
                }
              ]
            },
            "$.metadata.self": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.metadata.updated_at": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$"
                }
              ]
            },
            "$.spec.api_endpoint": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.availability": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(SINGLE_ZONE|MULTI_ZONE)$"
                }
              ]
            },
            "$.spec.byok.related": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.byok.resource_name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.cloud": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(AWS|GCP|AZURE)$"
                }
              ]
            },
            "$.spec.config.kind": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(Basic|Standard|Dedicated|Enterprise)$"
                }
              ]
            },
            "$.spec.environment.related": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.environment.resource_name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.http_endpoint": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.network.related": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.spec.network.resource_name": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(http|https)://.+"
                }
              ]
            },
            "$.status.cku": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "integer"
                }
              ]
            },
            "$.status.phase": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "regex",
                  "regex": "^(PROVISIONED|PROVISIONING|FAILED)$"
                }
              ]
            }
          },
          "header": {
            "$['Content-Type'][0]": {
              "combine": "AND",
              "matchers": [
                {
                  "match": "equality"
                }
              ]
            }
          }
        },
        "status": 200
      },
      "transport": "http",
      "type": "Synchronous/HTTP"
    }
  ],
  "metadata": {
    "pactRust": {
      "ffi": "0.4.5",
      "mockserver": "1.1.1",
      "models": "1.1.2"
    },
    "pactSpecification": {
      "version": "4.0"
    }
  },
  "provider": {
    "name": "TODO: confluent API service name"
  }
}